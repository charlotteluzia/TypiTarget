
ffn_get_cat_and_mem_targets <- function(available_images, this_block, vars) {
  
  
  # ..............................................................................
  # Calculate how many images we need for the categorization task + the memory task.
  # ..............................................................................
  n_typical_cat <- this_block[[1]]$n_typical
  n_typical_mem_novel <- round(this_block[[1]]$n_typical * vars$p_novel)
  
  n_untypical_cat <- vars$n_targets_per_block - this_block[[1]]$n_typical
  n_untypical_mem_novel <- (vars$n_targets_per_block - this_block[[1]]$n_typical) * vars$p_novel
  
  
  # ..............................................................................
  # Select the required number of images.
  # ..............................................................................
  typical_imgs <- available_images %>%
    # Filter rows where category matches current_category
    filter(category == this_block[[1]]$category) %>%
    # Take n_typical rows with the largest numbers in the column typicality
    arrange(desc(typicality)) %>%
    slice_head(n = n_typical_cat + n_typical_mem_novel) %>%
    # Randomly shuffle the rows
    slice(sample(n()))    
  
  typical_imgs$typi_bin <- "typical"
  
  
  untypical_imgs <- available_images %>%
    # Filter rows where category matches current_category
    filter(category == this_block[[1]]$category) %>%
    # Take n_untypical rows with the smallest numbers in the column typicality
    arrange(typicality) %>%
    slice_head(n = n_untypical_cat + n_untypical_mem_novel) %>%
    # Randomly shuffle the rows
    slice(sample(n()))
  
  untypical_imgs$typi_bin <- "untypical"
  
  
  # ..............................................................................
  # Take a random sample of the typical and untypical images as CATEGORIZATION targets.
  # ..............................................................................
  cat_typical   <- typical_imgs   %>% slice(1:n_typical_cat)
  cat_untypical <- untypical_imgs %>% slice(1:n_untypical_cat)
  
  cat_all <- bind_rows(cat_typical, cat_untypical)
  
  cat_all$cond_cat <- "target"
  cat_all$cond_mem <- ""
  cat_all$block_ptypical <- this_block[[1]]$p_typical
  cat_all$mdn_typ_hitypical <- median(typical_imgs$typicality)
  cat_all$mdn_typ_lotypical <- median(untypical_imgs$typicality) 
  
  
  
  # ..............................................................................
  # Take the remaining images as novel stimuli for the MEMORY task
  # ..............................................................................
  mem_typical   <- typical_imgs  
  mem_typical$cond_mem <- ""
  
  mem_untypical <- untypical_imgs 
  mem_untypical$cond_mem <- ""
  
  
  mem_typical <- mem_typical %>%
    mutate(cond_mem = case_when(
      row_number() %in% 1:n_typical_cat ~ "old",    
      row_number() %in% (n_typical_cat + 1):(n_typical_cat + n_typical_mem_novel) ~ "new",        
      TRUE ~ cond_mem
    ))
  
  
  mem_untypical <- mem_untypical %>%
    mutate(cond_mem = case_when(
      row_number() %in% 1:n_untypical_cat ~ "old",    
      row_number() %in% (n_untypical_cat + 1):(n_untypical_cat + n_untypical_mem_novel) ~ "new",        
      TRUE ~ cond_mem
    ))
  
    mem_all <- bind_rows(mem_typical, mem_untypical)
  
  
  mem_all$cond_cat <- ""
  
  mem_all$block_ptypical    <- this_block[[1]]$p_typical
  mem_all$mdn_typ_hitypical <- median(typical_imgs$typicality)
  mem_all$mdn_typ_lotypical <- median(untypical_imgs$typicality) 
  
  
  # ..............................................................................
  # Shuffle both lists.
  # ..............................................................................
  cat_all <- cat_all %>% slice(sample(n()))
  mem_all <- mem_all %>% slice(sample(n()))

  
  # ..............................................................................
  # Return both lists.
  # ..............................................................................
  return(list(cat_all = cat_all, mem_all = mem_all))
  
}
