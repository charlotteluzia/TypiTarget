# Use this code to generate a list for each subject that defines what image is
# to be presented on each trial. The list includes a lot of meta data that we
# may need to use in our data analysis later.

# New in scenecat3.0: we want to manipulate the proportion of typical/untypical
# images, so that one scene category has mostly typical images, another has
# mostly untypical images, and another is balanced.

rm(list = ls(all.names = TRUE))

# -----------------------------------------------------------------------------
# Load packages.
# -----------------------------------------------------------------------------
library(dplyr)
library(readxl)
library(data.table)
library(writexl) # We use this package for writing for compatibility w. PsychoPy
# The correct write functions should use an underscore in write_xlsx.



# -----------------------------------------------------------------------------
# Set the directories.
# -----------------------------------------------------------------------------
dirs <- list()

# dirs$main <- ("C:/Users/nbusch/sciebo_box_projects/Projects/2024_scenecat_3.0/experiment/scenecat3.0_exp")
dirs$main <- ("C:/Users/User/Desktop/input_files_generation")

# Directory where to find the image files and the table with image info.
dirs$images <- paste(dirs$main, "/stimuli", sep="")

# Output directory for storing the Excel files.
dirs$input_files <-paste(dirs$main, "/input_files", sep="")

# Directory where the R code is located.
dirs$rcode <-paste(dirs$main, "/trial_list_generator", sep="")
dirs$functions <-paste(dirs$rcode, "/functions", sep="")
setwd(dirs$rcode)



# -----------------------------------------------------------------------------
# Define variables
# -----------------------------------------------------------------------------
vars <- list()
vars$n_subjects              <- 1000 # Get input files for so many subjects.
vars$n_sets                  <- 10 # We generate only 20 different sets of input files with many duplicates to arrive at n_subjects input files. 
vars$categories              <- c('bedrooms', 'kitchens', 'living_rooms') # Use these scene categories.
vars$img_extension           <- 'png' #'jpg' or 'png', no dot required. The jpg files are much smaller.

vars$n_targets_per_block     <- 40

vars$n_blocks_per_category   <- 1 # Use multiple blocks for each category.
vars$p_distractors_per_block <- 1 # Proportion of distractors from non-target scenes. Distractors can be from either non-target category and we do not care about their typicality.
vars$n_distractors_per_block <- 2 * ceiling((vars$p_distractors_per_block * vars$n_targets_per_block)/2)
vars$p_novel                 <- 1 # Proportion of new images in the memory block.
vars$n_novel                 <- ceiling(vars$p_novel * vars$n_targets_per_block)
vars$n_catch_trials          <- 4 # Number of catch trials in each memory block

# The main point of this experiment is to manipulate the proportion of typical
# and untypical images. Each subject will experience one category with a high,
# balanced, and low proportion of typical scenes.
vars$p_typical               <- c(0.25, 0.50, 0.75)
vars$n_typical               <- vars$p_typical * vars$n_targets_per_block



# -----------------------------------------------------------------------------
# Generate input files for each subject.
# -----------------------------------------------------------------------------

# IMPORTANT: 
# Set a seed for reproducibility. 
# If you run this script multiple times, make sure to always execute this line
# so that the seed is re-initialized. This makes sure that everyone who every
# executes this script will always get the same random selection of images and
# the same order of trials.
set.seed(48149) # ZIP code of our institute ;-) 



# Get a set of block orders that counterbalances the sequence of scene
# categories and the proportions of typical images.
source(file.path(dirs$functions, "fn_counterbalance_blocks.R"))
counter_balanced_blocks <- fn_counterbalance_blocks(vars)



# Generate input files for all subjects.
source(file.path(dirs$functions, "fn_generate_input_cat_and_mem.R"))

# Outer loop: Continue until we reach the desired number of subjects
subject_count <- 0

while (subject_count < vars$n_subjects) {
  
  for (i in 1:nrow(counter_balanced_blocks)) {
    
    # Break the inner loop if we reach the desired number of subjects
    subject_count <- subject_count + 1
    if (subject_count > vars$n_subjects) break
    
    # Otherwise, generate input file for this subject.
    block_order <- counter_balanced_blocks[i, ]
    fn_generate_input_cat_and_mem(vars, dirs, subject_count, block_order)
  }
}

print("Done!")


