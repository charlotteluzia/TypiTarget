% function Info = RunTypiTarget(name, flavor)
% Oddball/Three Stimulus + Memory task Paradigm
% main script for testing 
% 

sca;
clear;
close all;

% participant number, e.g. 01
name = 'test';
flavor = 'training';
%% ---------------------------------------------------------------------
% Check if inputs are correct..
% ---------------------------------------------------------------------
% if nargin ~= 2
%     warning('You need to specify two input arguments: name and flavor.')
%     warning('Quitting now.')
%     return
% else
%     allowed_flavors = {'training', 'typitarget'};
%     if ~ismember(flavor, allowed_flavors)
%     warning('Flavor can be "training" or "typitarget".')
%     warning('Quitting now.')
%     return
%     end
% end


%% ---------------------------------------------------------------------
% Add paths and initialize global variables. and test if logfile exists for this subject.
% ---------------------------------------------------------------------
addpath('./Functions');
% addpath('./Easy-TTL-trigger-master');
addpath('./stimuli');
global Info P

%  provides control over random number generation, creating a seed based on the current time
rng("shuffle");


%% --------------------------------------------------------------------
% Initiate file names and load Parameters.
% ---------------------------------------------------------------------
P.Flavor = flavor;

[P] = Parameters(P);

Info                   = struct;
Info.name              = name;
Info.Logfilename       = ['Logfiles' filesep 'TypT_' flavor '_' name '_logfile.mat'];
Info.DateTime          = {datestr(clock)};
Info.P                 = P;

%% --------------------------------------------------------------------
% Run either test or full experiment by determining flavour
% ---------------------------------------------------------------------

switch flavor
    case 'training'
        Info.T_fin = MakeTrainingSequence(P);
        
    case 'full'
        Info.T_fin = MakeTrialSequence(P);
end

%% --------------------------------------------------------------------
% Define trials
% ---------------------------------------------------------------------
switch flavor
    case 'training'
        [Info.T_fin] = MakeTrainingSequence(P);
    case 'full'
        [Info.T_fin] = MakeTrialSequence(P);
end


%% ------------------------------------------------------------------------
% Open display
% ------------------------------------------------------------------------

global window
Screen('Preference', 'SkipSyncTests', P.doSkipSyncTest);
Screen('Resolution', P.PresentScreen, P.myWidth, P.myHeight, P.myRate);
% oldRes=SetResolution(0,P.myWidth, P.myHeight, P.myRate);
window = Screen('OpenWindow', P.PresentScreen, P.BgColor);
Screen(window, 'TextSize', 24);

P.White        = WhiteIndex(P.PresentScreen);
P.Black        = BlackIndex(P.PresentScreen);
P.FrDuration   = (Screen( window, 'GetFlipInterval')); % in ms

%% ------------------------------------------------------------------------
% Define the background for the memory task of this experiment
% ------------------------------------------------------------------------
global DefaultScreen
DefaultScreen = Screen('OpenOffscreenWindow', window, P.BgColor);
% tw = RectWidth(Screen('TextBounds',  window, P.mem_responseText));
% th = RectHeight(Screen('TextBounds', window, P.mem_responseText));
% Screen(DefaultScreen, 'DrawText', P.mem_responseText, P.CenterX-P.cueXoffset-0.5*tw, P.myHeight-P.cueYoffset, P.mem_cueColor);
% Screen(DefaultMemScreen, 'DrawText', P.cue_text{Info.P.mem_cueOld}, P.CenterX-P.cueXoffset-0.5*tw, P.myHeight-P.cueYoffset, P.mem_cueColor);
% Screen(DefaultScreen, 'DrawText', P.mem_responseText, P.CenterX+P.cueXoffset-0.5*tw, P.myHeight-P.cueYoffset, P.mem_cueColor);
% Screen(DefaultMemScreen, 'DrawText', P.cue_text{Info.P.mem_cueNew}, P.CenterX+P.cueXoffset-0.5*tw, P.myHeight-P.cueYoffset ,P.mem_cueColor);
% my_fixationpoint(DefaultScreen, P.CenterX, P.CenterY, 5, [100 100 100]);
my_optimal_fixationpoint(DefaultScreen, P.CenterX, P.CenterY, 0.6, [100 100 100], [192 192 192], P.pixperdeg);

%% --------------------------------------------------------------------
% Run across trials.
%----------------------------------------------------------------------
% ShowStartScreen(window, P)

% fprintf('\nNow running %d trials:\n\n', length(Info.T));
Info.StartTime = GetSecs;
tic;


% ----- Loop over trials -----
isQuit = false;

for itrial = 1:length(Info.T_fin)
    
    % Run the trial.
    [Info, isQuit] = OneTrial(itrial);

    if isQuit
        disp('Quit.')
        break
    end

    % Update Info structure.
    Info.T_fin(itrial).TrialCompleted = 1;
    Info.T_fin(itrial).ImgDur = P.ImgDur;
    Info.ntrials = itrial;
    Info.tTotal  = toc;
    Info.tFinish = {datestr(clock)};
    
    save(Info.Logfilename, 'Info');

end


%----------------------------------------------------------------------
% After last trial, close everything and exit.
%----------------------------------------------------------------------
WaitSecs(3);
CloseAndCleanup(P)

